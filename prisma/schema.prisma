generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  schemas          = ["ai-diss-summary"]
}

model Task {
  @@schema("ai-diss-summary")
  id            String          @id @default(cuid())
  username      String
  style         String          @default("diss")
  status        String          @default("pending")
  message       String?
  data          Json?
  content       String?
  imageUrl      String?
  shareUrl      String?
  error         String?
  userId        String?
  tokensUsed    Int?           @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  creditHistory CreditHistory[]
  avatarTasks   AvatarTask[]
}

model Credits {
  @@schema("ai-diss-summary")
  id        String          @id @default(cuid())
  userId    String          @unique
  amount    Int             @default(0)
  isAdmin   Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  history   CreditHistory[]
}

model CreditHistory {
  @@schema("ai-diss-summary")
  id          String   @id @default(cuid())
  amount      Int
  type        String
  description String
  taskId      String?
  creditsId   String
  createdAt   DateTime @default(now())
  credits     Credits  @relation(fields: [creditsId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
}

model CouponRedeem {
  @@schema("ai-diss-summary")
  id        String   @id @default(cuid())
  code      String
  userId    String
  type      String   // 'welcome', etc.
  credits   Int
  createdAt DateTime @default(now())

  @@unique([userId, code])
  @@index([userId, type])
}
model AvatarTask {
  @@schema("ai-diss-summary")
  id        String   @id @default(cuid())
  userId    String
  summaryId String
  status    String   @default("pending") // pending, processing, completed, failed
  credits   Int
  imageUrl  String?
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  summary   Task     @relation(fields: [summaryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([summaryId])
}
